/**
	This script sets up reference planes in the viewport according to the image
	files you drag&dropped onto the marked area. They will have correct dimensions
	and a twosided material applied to them. They will also be lined up on the x axis
	and you can specifiy whether to align height or width of all images.
	
	written by Christoph Bülter 11/09/2012
	www.cbuelter.de
	
	22/08/13: Added scaling option for planes; Script now remembers its settings
	03/01/13: Set plane segments to 1 on creation
	05/12/12: Removed axis checkboxes, added option to align width or length of the planes, updated image, tightened UI
	18/11/12: Removed self-illumination from Standard material. which made things too bright (thanks to DeaDog)
	13/10/12: Added option to choose the material type (mr arch&design, standard & vraymtl)
	06/10/12: Disabled Real World Scale for maps, added Gamma correction option using a color correction map (thanks to miauu, Kinofaya)
	29/09/12: UI checkbutton fix, thanks to Anubis
	27/09/2012: image from Base64 string (method by LoneRobot.net, thanks to barigazy); now uses "maxOps.canImportBitmap" thanks to Anubis
**/

macroscript dragNDropReferences
category:"Buelter"
(
	try(destroyDialog roDragNDropReferences)catch()
	rollout roDragNDropReferences "Reference Planes" width:150 height:136
	(
		/************************************
				VARIABLES
		************************************/
		local bmLogoBase64String = ""
		local AXIS = "x" -- axis to align planes on
		local mode = "none" 
		local mat = "standard"
		local planes = #() -- filled with planes for sorting
		
		/************************************
				FUNCTIONS
		************************************/

		/**
			Converts a given Base64 string to a dotnet image. Useful for including smaller images
			to a single script file, like logos. Faster conversion and smaller filesize compared to
			simple pixel array to image methods.
		**/
		fn base64str_to_dotnet_image str = -- http://lonerobot.net/ & barigazy
		(
			ConvertClass = dotNetClass "System.Convert"
			ImageClass = dotNetClass "System.Drawing.Image"
			
			byteArr = ConvertClass.FromBase64String str
			memstream = dotnetobject "System.IO.MemoryStream" byteArr
			DecodedImg = ImageClass.fromstream memstream
			memstream.close() ; 
			
			DecodedImg --return
		)--end fn

		/**
			Align all planes to have the same length or width as the last plane
			mode can either be "length" or "width" or "none"
		**/
		fn alignPlaneDimensions planes mode =
		(
			local ref = planes[planes.count]
			for i = 1 to (planes.count-1) do
			(
				if mode == "height" then
				(
					local ratio = planes[i].width / planes[i].length as float
					planes[i].length = ref.length
					planes[i].width = ref.length * ratio
				)
				else if mode == "width" then
				(
					local ratio = planes[i].length / planes[i].width as float
					planes[i].width = ref.width
					planes[i].length = ref.width * ratio
				)
			)--end for
		)--end fn
		
		/**
			Sorts objects on an axis with a given gap between.
				planes = array of objects
				axis = string "x", "y", or "z"
				gap = integer number
		**/
		fn sort_objects_in_a_row objs axis gap size=
		(
			local w, h, d
			local oldW, oldH, oldD
			local oldObject 
			
			for o in objs do
			(
				bb = nodeGetBoundingBox o o.transform
				in coordsys o
				(
					-- GET WIDTH
					if bb[1][1] >= bb[2][1] then
					(
						biggerW = bb[1][1]
						smallerW = bb[2][1]
					)
					else
					(
						biggerW = bb[2][1]
						smallerW = bb[1][1]
					)
					w = biggerW - smallerW
					
					-- GET HEIGHT
					if bb[1][2] >= bb[2][2] then
					(
						biggerH = bb[1][2]
						smallerH = bb[2][2]
					)
					else
					(
						biggerH = bb[2][2]
						smallerH = bb[1][2]
					)
					h = biggerH - smallerH
					
					-- GET DEPTH
					if bb[1][3] >= bb[2][3] then
					(
						biggerD = bb[1][3]
						smallerD = bb[2][3]
					)
					else
					(
						biggerD = bb[2][3]
						smallerD = bb[1][3]
					)
					d = biggerD - smallerD
				)--end coordsys	
				
				-- PLACEMENT
				if oldObject != undefined do
				(
					o.position = oldObject.position
					case axis of 
					(
						"x":
						(
							dist = oldW/2 + w/2 + (gap*size)
							move o [dist, 0, 0]
						)
						"y":
						(
							dist = oldH/2 + h/2 + (gap*size)
							move o [0, 0, dist]
						)
						"z":
						(
							dist = oldD/2 + d/2 + (gap*size)
							move o [0, dist, 0]					
						)
					)--end case
				)--end if
				oldObject = o
				oldW = w
				oldH = h
				oldD = d
			)--end for
		)--end fn

		/************************************
				GUI
		************************************/
		
		checkbutton ckbStandard "Standard" pos:[0,0] width:50 height:16 enabled:false highlightColor:(color 50 100 200) checked:true
		checkbutton ckbMrAD "mr A&D" pos:[50,0] width:50 height:16 highlightColor:(color 50 100 200)
		checkbutton ckbVRay "VRay" pos:[100,0] width:50 height:16 highlightColor:(color 50 100 200)
		
		checkbutton ckbGamma "Gamma:" pos:[1,17] width:43 height:16 highlightColor:(color 200 150 70) toolTip:"Uses a color correction map to adjust gamma"
		spinner spnGamma "" pos:[44,17] width:40 height:16 enabled:false range:[0.1,5,0.4545] type:#float scale:0.1
		
		label lblAlign "Align: " pos:[3,34] width:27 height:14
		checkbutton ckbNone "None" pos:[32,33] width:34 height:16 enabled:false highlightColor:(color 115 115 115) checked:true
		checkbutton ckbHeight "Height" pos:[66,33] width:42 height:16 enabled:true highlightColor:(color 30 160 30) checked:false
		checkbutton ckbWidth "Width" pos:[108,33] width:42 height:16 enabled:true highlightColor:(color 160 30 30) checked:false
		dotNetControl pb "System.Windows.Forms.PictureBox" pos:[0,50] width:150 height:120 
		spinner spnSize "Size:" pos:[95,17] width:55 height:16 range:[0.01,999,1.0] type:#float scale:0.01

		
		/************************************
				PERSISTENCE
		************************************/

		fn save_to_INI=
		(
			local pth = (getDir #userscripts) + "\\dragNDropReferences.ini"
			setINISetting pth "Settings" "mode" mode
			setINISetting pth "Settings" "mat" mat
			setINISetting pth "Settings" "gammaChecked" (ckbGamma.checked as String)
			setINISetting pth "Settings" "gammaValue" (spnGamma.value as String)
			setINISetting pth "Settings" "size" (spnSize.value as String)
		)--end fn
		
		fn load_from_INI=
		(
			local pth = (getDir #userscripts) + "\\dragNDropReferences.ini"
			if doesFileExist pth do
			(
				mode = getINISetting pth "Settings" "mode" 
				if mode == "none" then (
					ckbNone.checked = True; ckbWidth.checked = ckbHeight.checked = False
					ckbNone.enabled = False; ckbWidth.enabled = ckbHeight.enabled = True
				)
				else if mode == "width" then (
					ckbWidth.checked = True; ckbNone.checked = ckbHeight.checked = False
					ckbWidth.enabled = False; ckbNone.enabled = ckbHeight.enabled = True
				)
				else if mode == "height" then (
					ckbHeight.checked = True; ckbWidth.checked = ckbNone.checked = False
					ckbHeight.enabled = False; ckbWidth.enabled = ckbNone.enabled = True
				)
					
				mat = getINISetting pth "Settings" "mat" 
				if mat == "standard" then (
					ckbStandard.checked = True; ckbMrAD.checked = ckbVRay.checked = False
					ckbStandard.enabled = False; ckbMrAD.enabled = ckbVRay.enabled = True
					)
				else if mat == "mrAD" then (
					ckbMrAD.checked = True; ckbStandard.checked = ckbVRay.checked = False
					ckbMrAD.enabled = False; ckbStandard.enabled = ckbVRay.enabled = True
					)
				else if mat == "vray" then (
					ckbVRay.checked = True; ckbMrAD.checked = ckbStandard.checked = False
					ckbVRay.enabled = False; ckbMrAD.enabled = ckbStandard.enabled = True
					)
					
				ckbGamma.checked = (getINISetting pth "Settings" "gammaChecked") as BooleanClass
				spnGamma.enabled = (getINISetting pth "Settings" "gammaChecked") as BooleanClass
				spnGamma.value = (getINISetting pth "Settings" "gammaValue") as Float
				spnSize.value = (getINISetting pth "Settings" "size") as Float 
			)--end if
		)--end fn
		
	
		/************************************
				EVENTS
		************************************/

		on roDragNDropReferences open do
		(
			load_from_INI()
			
			pb.AllowDrop = on
				
			-- IMAGE CREATION
			
			-- THIS IS OLD STUFF (USING LOGOTOOLS TO GET THE IMAGE)
		-- 			-- to see the image, we need to convert from a MXS bitmap to a dotNet Systems.Drawing.Bitmap using the clipboard!
		-- 			bm = (CreateImage Pixels)
		-- 			setClipboardBitmap bm
		-- 			-- now get from clipboard as dotNet object
		-- 			dotNetCB = dotNetClass "System.Windows.Forms.Clipboard"
		-- 			dotNetBM = dotNetCB.GetImage()
		-- 			pb.image = dotNetBM
			
			pb.image = base64str_to_dotnet_image bmLogoBase64String
		)--end on
		
		on roDragNDropReferences close do
		(
			save_to_INI()
		)--end on
		
		-- HANDLE CHECKBUTTONS (LIKE RADIOBUTTONS)
		on ckbStandard changed state do
		(
			ckbStandard.enabled = not state
			ckbMrAD.enabled = ckbVRay.enabled = state
			ckbMrAD.checked = ckbVRay.checked = not state
			mat = "standard"
		)--end on
		on ckbMrAD changed state do
		(
			ckbMrAD.enabled = not state
			ckbStandard.enabled = ckbVRay.enabled = state
			ckbStandard.checked = ckbVRay.checked = not state
			mat = "mrAD"
		)--end on
		on ckbVRay changed state do
		(
			ckbVRay.enabled = not state
			ckbMrAD.enabled = ckbStandard.enabled = state
			ckbMrAD.checked = ckbStandard.checked = not state
			mat = "vray"
		)--end on
		on ckbGamma changed state do
		(
			spnGamma.enabled = state
		)--end on
		
		on ckbHeight changed state do
		(
			ckbHeight.enabled = not state
			ckbNone.enabled = ckbWidth.enabled = state
			ckbNone.checked = ckbWidth.checked = not state
			
			if state do mode = "height"
		)--end on
		on ckbWidth changed state do
		(
			ckbWidth.enabled = not state
			ckbNone.enabled = ckbHeight.enabled = state
			ckbNone.checked = ckbHeight.checked = not state
			
			if state do mode = "width"
		)--end on
		on ckbNone changed state do
		(
			ckbNone.enabled = not state
			ckbHeight.enabled = ckbWidth.enabled = state
			ckbHeight.checked = ckbWidth.checked = not state
			
			if state do mode = "none"
		)--end on
		
		-- DRAG AND DROP FUNCTIONALITY
		on pb DragOver s e do
		(
			e.Effect = if e.data.ContainsFileDropList() then e.Effect.Move else e.Effect.None
		)--end on
		on pb DragDrop s e do
		(
			if e.data.ContainsFileDropList() do
			(
				data = e.data.GetFileDropList()
				files = for k=0 to data.count-1 collect data.item[k]
				
				-- FILTER BY FILE TYPE
				for f in files where maxOps.canImportBitmap f do
				(
					if (doesFileExist f) do
					(
						-- CREATE DIFFUSE MAP						
						bmt = BitmapTexture filename:f
						bmt.coords.realWorldScale = false -- requested
						if ckbGamma.checked then
						(
							cc = Color_Correction map:bmt gammaRGB:spnGamma.value
							cc.lightnessmode = 1 -- enables "Advanced" options, so gamma setting has an effect
							difMap = cc
						)--end if
						else
						(
							difMap = bmt
						)--end else
						
						-- CREATE MATERIAL
						case mat of
						(
							"standard":
							(
								theMat = Standard  twosided:true name:(uniqueName "Ref_Plane_Mat") showInViewport:true --selfIllumAmount:100
								theMat.diffuseMap = difMap
							)
							"mrAD":
							(
								theMat = Arch___Design__mi name:(uniqueName "Ref_Plane_Mat") showInViewport:true
								theMat.diff_color_map = difMap
							)
							"vray":
							(
								theMat = VRayMtl name:(uniqueName "Ref_Plane_Mat") showInViewport:true
								theMat.texmap_diffuse = difMap
							)
						)--end case
						
						-- CREATE PLANE
						pln = Plane width:(bmt.bitmap.width*spnSize.value) length:(bmt.bitmap.height*spnSize.value) material:theMat lengthsegs:1 widthsegs:1
						append planes pln
						rotate pln (angleaxis 90 [1,0,0]) -- make sure its rotated correctly, facing the front viewport
					)--end if
				)--end for
				
				-- SORTING THE PLANES 
				alignPlaneDimensions planes mode
				print mode
				sort_objects_in_a_row planes AXIS 20 spnSize.value
				select planes
				max zoomext sel all
				completeRedraw()
				
				-- CLEAN UP
				planes = #()
			)--end if
		)--end on
	)
	createdialog roDragNDropReferences
)
-- run script
macros.run "Buelter" "dragNDropReferences"